import {VercelToolbar} from '@vercel/toolbar/next'
import {VisualEditing} from 'next-sanity'
import {revalidatePath, revalidateTag, unstable_cache} from 'next/cache'
import {draftMode} from 'next/headers'
import '../../tailwind.css'
import {Timesince} from '../Timesince'

export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
}

export default async function RootLayout({children}: {children: React.ReactNode}) {
  return (
    <html lang="en">
      <body>
        {children}
        <VercelToolbar />
        {draftMode().isEnabled && (
          <VisualEditing
            refresh={async (payload) => {
              'use server'
              if (!draftMode().isEnabled) {
                console.error('Draft Mode is not enabled, ignoring refresh')
                return
              }
              if (payload.source === 'manual') {
                console.log('Revalidating everything')
                return revalidatePath('/only-visual-editing', 'layout')
              }
              if (payload.source === 'mutation') {
                if (payload.document.slug?.current) {
                  const tag = `${payload.document._type}:${payload.document.slug.current}`
                  console.log('Revalidate slug', tag)
                  await revalidateTag(tag)
                }
                console.log('Revalidate tag', payload.document._type)
                return revalidateTag(payload.document._type)
              }
            }}
          />
        )}
        <a
          href={draftMode().isEnabled ? '/api/disable-draft' : undefined}
          title={draftMode().isEnabled ? 'Click to disable Draft Mode' : undefined}
          className="fixed bottom-1 left-1 block rounded bg-slate-900 px-2 py-1 text-xs text-slate-100"
        >
          app-router:{' '}
          {draftMode().isEnabled
            ? 'draftMode'
            : process.env.NEXT_PUBLIC_VERCEL_ENV || 'development'}
          {', '}
          <span className="text-slate-300">
            served: <Timesince since={await getCachedServed()} />
          </span>
        </a>
      </body>
    </html>
  )
}

const getCachedServed = unstable_cache(
  async () => new Date().toJSON(),
  ['only-visual-editing-test'],
  {tags: ['served']},
)
